//===- Hello.cpp - Example code from "Writing an LLVM Pass" ---------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file implements two versions of the LLVM "Hello World" pass described
// in docs/WritingAnLLVMPass.html
//
//===----------------------------------------------------------------------===//

#define DEBUG_TYPE "chao"
#include <map>
#include "llvm/Pass.h"
#include "llvm/Module.h"
#include "llvm/Function.h"
#include "llvm/Instructions.h"
#include "llvm/Constants.h"
#include "llvm/Type.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/ADT/Statistic.h"
using namespace llvm;

STATISTIC(ModuleCounter, "Counts number of modules greeted");

namespace {

std::map<StringRef,GlobalVariable*>  funcName_to_globalVar;

void TAP_declareFunctions(Module *M);
void TAP_instrumentModule(Module *M);
void TAP_instrumentBasicBlock_Inst(BasicBlock *B);
CallInst* TAP_createInstPre(Instruction *I);
CallInst* TAP_createInstPost(Instruction *I);
Constant *TAP_getInstructionNameExpr(Instruction *I);
Constant *TAP_getInstTypeNameExpr(Instruction *I); 
Constant *TAP_getStringNameExpr(Module *M, StringRef &str);
std::string TAP_getReplaceFuncName(Function &func);


struct ChaoModule : public ModulePass {

  static char ID; 

  ChaoModule() : ModulePass(ID) {}
  
  virtual bool runOnModule(Module &M) {
    ++ModuleCounter;
    errs() << "ChaoModule : ";
    errs().write_escaped(M.getModuleIdentifier()) << '\n';

    TAP_replaceFunctions(&M);
    TAP_declareFunctions(&M);
    TAP_instrumentModule(&M);
    
    return false;
  }
  
};

void TAP_replaceFunctions(Module *M)
{
  for (Module::iterator F = M->begin(); F != M->end(); F++) {
    if (F->isDeclaration()) {
      Function &func = *F;
      std::string func_name = TAP_getReplaceFuncName(func);
      if (func_name != "") {
        func.setName( func_name );
      }
      errs() << "func->getName() = ";
      errs().write_escaped(func.getName()) << '\n';      
    }
  }
}


void TAP_declareFunctions(Module *M)
{
  LLVMContext &C = M->getContext();
  FunctionType *FT = NULL;
  {
    Type *Result = Type::getVoidTy(C);
    Type *FnName = PointerType::getUnqual(IntegerType::getInt8Ty(C));
    std::vector<Type*> Params;
    Params.push_back(FnName);
    bool isVarArg = true;  
    FT = FunctionType::get(Result, Params, isVarArg);
  }
  M->getOrInsertFunction("TAP_CALL_PRE", FT);
  M->getOrInsertFunction("TAP_CALL_POST", FT);
  M->getOrInsertFunction("TAP_INST_PRE", FT);
  M->getOrInsertFunction("TAP_INST_POST", FT);
}


void TAP_instrumentModule(Module *M)
{
  for (Module::iterator F = M->begin(); F != M->end(); F++) {
    for (Function::iterator B = F->begin(); B != F->end(); B++) {
      TAP_instrumentBasicBlock_Call(B);
      TAP_instrumentBasicBlock_Inst(B);
    }
  }
}


// for each non-system call, e.g. 
//
//    %x = call @foo (%a, %b)
//
// transform it to
//
//    call @TAP_call_pre  ( @foo,  %a, %b );
//    %x = call @foo (%a, %b)
//    call @TAP_call_post ( @foo,  %x );
//
void TAP_instrumentBasicBlock_Call(BasicBlock *B)
{
  // for each function, prepare the "PRE" and "POST" calls
  std::vector<BasicBlock::iterator> insertPts;
  std::vector<CallInst*> insertPreIs;
  std::vector<CallInst*> insertPostIs;
  for (BasicBlock::iterator I = B->begin(); I != B->end(); I++) {
    if (CallInst *callI = dyn_cast<CallInst>(I)) {
      CallInst *preI  = TAP_createCallInstPre(callI);  //create "PRE"
      CallInst *postI = TAP_createCallInstPost(callI); //create "POST"
      insertPts.push_back(I);
      insertPreIs.push_back(preI);
      insertPostIs.push_back(postI);
    }        
  }  
  // inserting the "PRE" and "POST" calls
  for (unsigned int n=0; n<insertPts.size(); n++) {
    B->getInstList().insert( insertPts[n], insertPreIs[n] );
    B->getInstList().insertAfter( insertPts[n], insertPostIs[n] );
  }
}

// for each LLVM instruction 
//
//    %x = load %mem
//    store %x, %mem
//
// transform it to
//
//    call @TAP_INST  ( "load",  %x,  %mem);
//    %x = load %mem
//    call @TAP_INST  ( "store", %x,  %mem)
//    store %x, %mem
//
void TAP_instrumentBasicBlock_Inst(BasicBlock *B)
{
  // for each load/store instruciton, prepare the "INST" call 
  std::vector<BasicBlock::iterator> insertPts;
  std::vector<CallInst*> insertPreIs;
  std::vector<CallInst*> insertPostIs;
  for (BasicBlock::iterator I = B->begin(); I != B->end(); I++) {
    if (dyn_cast<CallInst>(I)) {
      continue;
    }
    else if (dyn_cast<LoadInst>(I)) {
      CallInst *preI  = TAP_createInstPre(I);  //create "PRE"
      CallInst *postI  = TAP_createInstPost(I);  
      insertPts.push_back(I);
      insertPreIs.push_back(preI);
      insertPostIs.push_back(postI);
    }        
    else if (dyn_cast<StoreInst>(I)) {
      CallInst *preI = TAP_createInstPre(I); //create "PRE"
      CallInst *postI  = TAP_createInstPost(I);  
      insertPts.push_back(I);
      insertPreIs.push_back(preI);
      insertPostIs.push_back(postI);
    }
    else if (I->isTerminator() == false){
      CallInst *preI = TAP_createInstPre(I);
      CallInst *postI  = TAP_createInstPost(I);  
      insertPts.push_back(I);
      insertPreIs.push_back(preI);
      insertPostIs.push_back(postI);
    }
  }  
  // inserting the "PRE" calls
  for (unsigned int n=0; n<insertPts.size(); n++) {
    B->getInstList().insert( insertPts[n], insertPreIs[n] );
    B->getInstList().insertAfter( insertPts[n], insertPostIs[n] );
  }
}


// for each function call instruction
//      @foo (%a, %b)
// create a new call instruction
//      call @TAP_call_pre  ( @foo,  %a, %b );
CallInst* TAP_createCallInstPre(CallInst *I) 
{
  CallInst *preI = NULL;

  Module *M = I->getParent()->getParent()->getParent();  
  //LLVMContext &C = M->getContext();

  Value *preFunc  = M->getFunction("TAP_CALL_PRE");
  
  std::vector<Value*> Args;
  Constant *f_name_ptr = TAP_getCalledFuncNameExpr(I);
  Args.push_back( f_name_ptr );
  for (unsigned int n = 0; n < I->getNumArgOperands(); n++) {
    Args.push_back( I->getArgOperand(n) );
  }

  preI  = CallInst::Create(preFunc, Args);
  return preI;
}


// for each function call instruction
//      @foo (%a, %b)
// create a new call instruction
//      call @TAP_call_post  ( @foo,  %a, %b );
CallInst* TAP_createCallInstPost(CallInst *I) 
{
  CallInst *postI = NULL;

  Module *M = I->getParent()->getParent()->getParent();  
  //LLVMContext &C = M->getContext();

  Value *postFunc  = M->getFunction("TAP_CALL_POST");

  std::vector<Value*> Args;
  Constant *f_name_ptr = TAP_getCalledFuncNameExpr(I);
  Args.push_back( f_name_ptr );
  if ( I->getType()->isVoidTy() == false ) {
    Args.push_back((Value*)I);
  }
  /*
  for (unsigned int n = 0; n < I->getNumArgOperands(); n++) {
    Args.push_back( I->getArgOperand(n) );
  }
  */
  postI  = CallInst::Create(postFunc, Args);
  return postI;
 }

Constant *TAP_getStringNameExpr(Module *M, StringRef &f_nm)
{
  LLVMContext &C = M->getContext();
  

  GlobalVariable *f_name_v;
  if (funcName_to_globalVar.find(f_nm) != funcName_to_globalVar.end()) {
    f_name_v = funcName_to_globalVar[ f_nm ];
  }
  else {
    Constant *f_name = ConstantArray::get(C, f_nm);
    f_name_v = new GlobalVariable(*M, f_name->getType(), true, 
                                  GlobalValue::InternalLinkage,
                                  f_name,  "__tap_" + f_nm);
    funcName_to_globalVar[f_nm] = f_name_v;
  }
  Constant *zero_32 = Constant::getNullValue(IntegerType::getInt32Ty(C));    
  Constant *gep_params[] = { zero_32, zero_32 };
  Constant *f_name_ptr = ConstantExpr::getGetElementPtr(f_name_v, gep_params);
  return f_name_ptr;
}


// given the CallInst, create a constrant string expr of the func name
Constant *TAP_getCalledFuncNameExpr(CallInst *I)
{
  StringRef f_nm = I->getCalledFunction()->getName();
  Module *M = I->getParent()->getParent()->getParent();
  Constant *val = TAP_getStringNameExpr(M, f_nm);
  return val; 
}

Constant *TAP_getInstructionNameExpr(Instruction *I)
{
  StringRef f_nm = I->getName();
  Module *M = I->getParent()->getParent()->getParent();
  Constant *val = TAP_getStringNameExpr(M, f_nm);
  return val; 
}

// given the Inst, create a constrant string expr of the inst type 
Constant *TAP_getInstTypeNameExpr(Instruction *I)
{
  StringRef it_nm = I->getOpcodeName();
  /*
  if (dyn_cast<LoadInst>(I)) {
    it_nm = "load";
  }
  else if (dyn_cast<StoreInst>(I)) {
    it_nm = "store";
  }
  else {
    it_nm = I->getOpcodeName();
  }
  */
  Module *M = I->getParent()->getParent()->getParent();
  Constant *val = TAP_getStringNameExpr(M, it_nm);
  return val;
}


// for each LLVM instruction 
//      %x = load %mem
// create a new call instruction
//      call @TAP_INST ( "load",  %x, %mem );
CallInst* TAP_createInstPre(Instruction *I) 
{
  CallInst *preI = NULL;

  Module *M = I->getParent()->getParent()->getParent();  
  Value *preFunc  = M->getFunction("TAP_INST_PRE");
  
  std::vector<Value*> Args; 
  {
    Constant *it_name_ptr = TAP_getInstTypeNameExpr(I);
    Args.push_back( it_name_ptr );
    for (unsigned int n = 0; n < I->getNumOperands(); n++) {
      Args.push_back( I->getOperand(n) );
    }
  }
  
  preI  = CallInst::Create(preFunc, Args);
  return preI;
}

CallInst* TAP_createInstPost(Instruction *I) 
{
  CallInst *preI = NULL;

  Module *M = I->getParent()->getParent()->getParent();  
  Value *preFunc  = M->getFunction("TAP_INST_POST");
  
  std::vector<Value*> Args;
  {
    Constant *it_name_ptr = TAP_getInstTypeNameExpr(I);
    Args.push_back( it_name_ptr );
    if ( I->getType()->isVoidTy() == false ) {
      Value *val = I;
      Args.push_back(val);
    }
    /*
    for (unsigned int n = 0; n < I->getNumOperands(); n++) {
      Args.push_back( I->getOperand(n) );
    }
    */
  }

  preI  = CallInst::Create(preFunc, Args);
  return preI;
}


}//namespace

char ChaoModule::ID = 0;
static RegisterPass<ChaoModule> X("chaomodule", "Chao's Module Pass");
